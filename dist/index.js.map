{"version":3,"sources":["../src/index.js"],"names":["app","config","use","req","res","next","err","Error","status","json","errorHandler","require","main","module","get","listen","process","env","PORT","port","listeningPort","console","log","httpsOptions","key","fs","readFileSync","__dirname","cert","https","createServer"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AACA;AAEA,IAAMA,GAAG,GAAG,uBAAZ,C,CAEA;;;AAEA,IAAMC,MAAM,GAAG,qBAAcD,GAAd,CAAf;AACA;;;;;;;;;;;;;;;;AAgBA;AACA;AAEA;;AACAA,GAAG,CAACE,GAAJ,CAAQ,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AAC9B,MAAMC,GAAG,GAAGC,KAAK,CAAC,WAAD,CAAjB;AACAD,EAAAA,GAAG,CAACE,MAAJ,GAAa,GAAb;AACAH,EAAAA,IAAI,CAACC,GAAD,CAAJ;AACH,CAJD;AAMAN,GAAG,CAACE,GAAJ,CAAQ,UAAUI,GAAV,EAAeH,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+B;AACnCD,EAAAA,GAAG,CAACI,MAAJ,CAAWF,GAAG,CAACE,MAAJ,IAAc,GAAzB,EAA8BC,IAA9B,CAAmCC,YAAY,CAACJ,GAAD,CAA/C;AACH,CAFD,E,CAIA;AACA;AACA;;AACA,IAAIK,OAAO,CAACC,IAAR,KAAiBC,MAArB,EAA6B;AACzB,MAAI,iBAAiBb,GAAG,CAACc,GAAJ,CAAQ,KAAR,CAAjB,IAAmC,WAAWd,GAAG,CAACc,GAAJ,CAAQ,KAAR,CAAlD,EAAkE;AAE9D;AACA;AAEAd,IAAAA,GAAG,CAACe,MAAJ,CAAWC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoBjB,MAAM,CAACkB,IAAtC,EAA4C,YAAM;AAC9C,UAAMC,aAAa,GAAGJ,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoBjB,MAAM,CAACkB,IAAjD;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAA8BF,aAA1C;AACH,KAHD;AAKH,GAVD,MAUO;AAEH;AAEA,QAAMG,YAAY,GAAG;AACjBC,MAAAA,GAAG,EAAEC,YAAGC,YAAH,CAAgBC,SAAS,GAAG,aAA5B,CADY;AAEjBC,MAAAA,IAAI,EAAEH,YAAGC,YAAH,CAAgBC,SAAS,GAAG,cAA5B;AAFW,KAArB;;AAKAE,mBAAMC,YAAN,CAAmBP,YAAnB,EAAiCvB,GAAjC,EAAsCe,MAAtC,CAA6CC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoBjB,MAAM,CAACkB,IAAxE,EAA8E,YAAM;AAChF,UAAMC,aAAa,GAAGJ,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoBjB,MAAM,CAACkB,IAAjD;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAA8BF,aAA1C;AACH,KAHD;AAIH;AACJ","sourcesContent":["import express from 'express';\nimport https from 'https';\nimport bodyParser from 'body-parser';\nimport fs from 'fs';\nimport configuration from './config'\n//import routes from './routes'\n\nconst app = express();\n\n// CONFIG ------------------------------------------------------------------------\n\nconst config = configuration(app);\n/*\nif ('test' === process.env.NODE_ENV || 'test_local' === process.env.NODE_ENV) {\n    db.disconnect();\n}\ndb.connect(config);\n\n// MIDDLEWARE -------------------------------------------------------------------\n\napp.use(bodyParser.json({\n    limit: process.env.APP_BODY_LIMIT || config.bodyLimit\n}));\n\napp.use(bodyParser.urlencoded({\n    extended: false\n}));\n*/\n// ROUTES -----------------------------------------------------------------------\n//app.use('/', routes(config));\n\n// catch 404 and forward to error handler\napp.use(function (req, res, next) {\n    const err = Error('Not Found');\n    err.status = 404;\n    next(err);\n});\n\napp.use(function (err, req, res, next) {\n    res.status(err.status || 500).json(errorHandler(err));\n});\n\n// To listen for connections only when our index.js file is called directly by node\n// and not when is required by our files.\n// See: https://puigcerber.com/2015/11/27/testing-express-apis-with-tape-and-supertest/\nif (require.main === module) {\n    if ('production' === app.get('env') || 'test' === app.get('env')) {\n\n        // SSL termination is done on Heroku servers/load-balancers before the traffic gets to the application.\n        // So in production, Heroku is in charge of HTTPS.\n\n        app.listen(process.env.PORT || config.port, () => {\n            const listeningPort = process.env.PORT || config.port;\n            console.log('Server listening on port ' + listeningPort);\n        });\n\n    } else {\n\n        // In other environment, we are in charge of managing HTTPS connections\n\n        const httpsOptions = {\n            key: fs.readFileSync(__dirname + '/../key.pem'),\n            cert: fs.readFileSync(__dirname + '/../cert.pem')\n        };\n\n        https.createServer(httpsOptions, app).listen(process.env.PORT || config.port, () => {\n            const listeningPort = process.env.PORT || config.port;\n            console.log('Server listening on port ' + listeningPort);\n        });\n    }\n}\n\n\nexport {app};"],"file":"index.js"}